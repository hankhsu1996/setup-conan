name: "Setup Conan Environment"
description: "Configure Python and install Conan with optional caching for dependencies and tools to streamline your CI workflow."
author: "Shou-Li Hsu"
branding:
  icon: "package"
  color: "blue"

inputs:
  conan-version:
    description: "Version of Conan to install"
    required: false
    default: "2.*"
  python-version:
    description: "Version of Python to install"
    required: false
    default: "3.x"
  conan-home:
    description: "Custom Conan home directory"
    required: false
  cache-dependencies:
    description: "Cache Conan dependencies"
    required: false
    default: "false"
  cache-tool:
    description: "Cache Conan tool (pip dependencies)"
    required: false
    default: "false"

outputs:
  conan-version:
    description: "Resolved Conan version"
  python-version:
    description: "Resolved Python version"
  conan-home:
    description: "Resolved Conan home directory"
  cache-dependencies-hit:
    description: "Whether Conan dependencies cache hit"
  cache-tool-hit:
    description: "Whether Conan tool cache hit"

runs:
  using: "composite"
  steps:
    - name: Create requirements.txt for Conan and Colorama
      run: |
        temp_dir=$(pwd)/temp
        mkdir -p $temp_dir
        if [ -z "${{ inputs.conan-version }}" ]; then
          echo "conan" > $temp_dir/requirements.txt
        else
          echo "conan==${{ inputs.conan-version }}" > $temp_dir/requirements.txt
        fi
        echo "colorama" >> $temp_dir/requirements.txt
        echo "requirements-txt=$temp_dir/requirements.txt" >> $GITHUB_OUTPUT
      shell: bash

    - name: Setup Python
      id: setup-python
      if: ${{ inputs.cache-tool == 'true' }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: "pip"

    - name: Setup Python without Cache
      id: setup-python-no-cache
      if: ${{ inputs.cache-tool != 'true' }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set resolved Python version output
      if: ${{ inputs.cache-tool == 'true' }}
      run: |
        echo "python-version=${{ steps.setup-python.outputs.python-version }}" >> $GITHUB_OUTPUT
        echo "cache-tool-hit=${{ steps.setup-python.outputs.cache-hit }}" >> $GITHUB_OUTPUT

    - name: Set resolved Python version output
      if: ${{ inputs.cache-tool != 'true' }}
      run: |
        echo "python-version=${{ steps.setup-python-no-cache.outputs.python-version }}" >> $GITHUB_OUTPUT
        echo "cache-tool-hit=${{ steps.setup-python-no-cache.outputs.cache-hit }}" >> $GITHUB_OUTPUT

    - name: Install Conan and Colorama
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r $(pwd)/temp/requirements.txt
      shell: bash

    - name: Set Resolved Conan Version
      id: get-conan-version
      run: |
        echo "Getting resolved Conan version"
        conan --version | awk '{print $3}' | xargs -I {} echo "conan-version={}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Determine Conan Home
      id: determine-conan-home
      run: |
        echo "Determining Conan Home"
        if [ -z "${{ inputs.conan-home }}" ]; then
          if [[ "${{ steps.get-conan-version.outputs.conan-version }}" == 2* ]]; then
            echo "Setting conan-home to $HOME/.conan2"
            echo "conan-home=$HOME/.conan2" >> $GITHUB_OUTPUT
          else
            echo "Setting conan-home to $HOME/.conan"
            echo "conan-home=$HOME/.conan" >> $GITHUB_OUTPUT
          fi
        else
          echo "Setting conan-home to user-provided value: ${{ inputs.conan-home }}"
          echo "conan-home=${{ inputs.conan-home }}" >> $GITHUB_OUTPUT
          echo "CONAN_HOME=${{ inputs.conan-home }}" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Cache Conan Packages
      if: ${{ inputs.cache-dependencies == 'true' }}
      uses: actions/cache@v4
      with:
        path: ${{ steps.determine-conan-home.outputs.conan-home }}
        key: conan-${{ steps.get-conan-version.outputs.conan-version }}-${{ runner.os }}-${{ hashFiles('**/conanfile.*') }}
        restore-keys: |
          conan-${{ steps.get-conan-version.outputs.conan-version }}-${{ runner.os }}-

    - name: Set Dependency Cache Hit Output
      if: ${{ inputs.cache-dependencies == 'true' }}
      run: |
        echo "cache-dependencies-hit=${{ steps.cache-conan-packages.outputs.cache-hit }}" >> $GITHUB_OUTPUT
